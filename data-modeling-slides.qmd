---
title: "Tidy Data"
author: "coreR Orctober 2023"
format: revealjs
editor: 
  markdown: 
    wrap: 72
---

```{=html}
<style>
    .reveal section p {
    display: inline-block;
    font-size: 0.6em;
    line-height: 1.2em;
    vertical-align: center;
  }
  
  .v-center-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 90%;
}
</style>
```
# Learning Objectives {.unnumbered}

Learn how to design and create effective data tables by:

-   applying tidy and normalized data principles,
-   following best practices to format data tables' content,
-   relating tables following relational data models principles, and
-   understanding how to perform table joins.

# Tidy Data

## 

![tidy images by Allison
Horst](tidy-data-images/tidy_data/make-tidy-friends.jpg){fig-align="center"}

## What is tidy data?
Tidy data is a **standardized way of organizing data tables** that
allows us to *manage and analyze data efficiently*, because it **makes
it straightforward to understand** the corresponding variable and
observation of each value.

## Tidy Data Principles

1.  Every column is a variable.
2.  Every row is an observation.
3.  Every cell is a single value.

## Tidy Data (side note)

-   Tidy data is not language or tool specific
-   Tidy data is not an "R thing"
-   Tidy data is not a `tidyverse` thing

TIDY DATA **IS A WAY TO ORGANIZE DATA** THAT WILL **MAKE LIFE EASIER**
TO PEOPLE WORKING WITH DATA

## Tidy Data Principles

1.  Every column is a **variable**.
2.  Every row is an **observation**.
3.  Every cell is a single **value**.

## The Building Blocks

A dataset is a collection of **values**, with each value belonging to an
**observation** and a **variable**.

## Variable

Characteristic that is being measured, counted or described with data.

-   [Example:]{.underline} Car type, salinity, year, mass.

## Observation
a single “data point” for which the measure, count or description of one or more variables is recorded.

-   [Example:]{.underline} If we are collecting data for variables height, species, and location of plants, each plant is an observation.

## Value

The record measured, count or description of a variable.

-   [Example:]{.underline} For the variable height, 3 (ft) would be the value.


## Entity

Each of the types of observation is an entity.

-   [Example:]{.underline} If we collect data for variables: height, species, location, site_name for plants and where they are seen, **plant** is and entity and **site** is an entity.


## Tidy Data Principles

1.  Every column is a **variable**.
2.  Every row is an **observation**.
3.  Every cell is a single **value**.

# Tidy example

## 

<center>![](tidy-data-images/tidy_data/tidy_data.png){fig-align="center"
width="50%"}
![](tidy-data-images/tidy_data/tidy_variables.png){fig-align="center"
width="50%"}
![](tidy-data-images/tidy_data/tidy_observations.png){fig-align="center"
width="50%"}
![](tidy-data-images/tidy_data/tidy_values.png){fig-align="center"
width="50%"}</center>

## Recognizing untidy data

Anything that does not follow the three tidy data principles is **untidy
data**.

There are *many* ways in which data can become untidy, some can be
noticed right away, while others are more subtle.

![tidy images by Allison
Horst](tidy-data-images/tidy_data/untidy-vs-tidy.jpg){fig-align="center"}

# Example 1

## 

Actual dataset that came across NCEAS.

![](tidy-data-images/tidy_data/excel-org-01.png)

## Multiple tables

**Having multiple tables immediately breaks the tidy data principles**

![](tidy-data-images/tidy_data/excel-org-02.png)

INSTEAD: create separate tables/files for each entity measured

## Inconsistent columns

Each column contains more than one variable type


![](tidy-data-images/tidy_data/excel-org-04.png)

INSTEAD: all values in a column should be of the same type (tip: compare units) 



## Inconsistent rows

Each row corresponds to more than one observation

![](tidy-data-images/tidy_data/excel-org-03.png)

INSTEAD: each row should represent a single observed entity

## Marginal sums and statistics

Marginal sums & statistics are combinations of observations 


![](tidy-data-images/tidy_data/excel-org-05.png)

INSTEAD: only identifying or measured variables should exist here;  use a scripted language to analyze data / calculate summary stats


# Example 2

## 

![](tidy-data-images/tidy_data/untidy_1.png)

-   *date*: date when a species was observed
-   *site*: site where a species was observed
-   *name*: site's name
-   *altitude*: site's altitude
-   *sp1code*, *sp2code*: species code for two plants observed
-   *sp1height*, *sp2height*: height of the animals observed

## Multiple Observations

Remember: an observation is a single “data point” that one or more variables are measured – all the values measured for an individual entity. 


If our entity is a single observed animal, then the values we measured are date and site of observation, the altitude, and the species code and
height.

This table breaks the second tidy data principles: Every row is an observation.

![](tidy-data-images/tidy_data/untidy_2.png)

## 

![](tidy-data-images/tidy_data/untidy_2.png)

People often refer to this as "**wide format**", because the
observations are spread across a wide number of columns.

Note that, should one encounter a new species in the survey, we would have to add new columns to the table. This is difficult to analyze, understand, and maintain.

## 

![](tidy-data-images/tidy_data/untidy_2.png)

To solve this problem, we can create a single column for species code
and a single column for species height as in the following table.

![](tidy-data-images/tidy_data/tidy_not_normal.png)


## 

![tidy images by Allison
Horst](tidy-data-images/tidy_data/why-tidy-data.jpg){fig-align="center"}

## Why Tidy Data

-   **Efficiency:** less re-creating the wheel. Easier to apply the same tools to different datasets.
-   **Collaboration:** Makes it easier to work with others as you can work with the same tools in the same ways.
-   **Reuse:** It makes it easier to apply similar techniques and analysis across different or new datasets.
-   **Generalizability:** Tools built for one tidy data set can be used to multiple other datasets. Opening possibilities of data you can work with.


## Why Tidy Data in R

> "There is a specific advantage to placing varables in columns becasuse it allows R's vectorized nature to shine. ...most buit-in R functions work with vactors of values. That makes transforming tidy data feel particularly natural. (R for Data Science by Grolemund and Wickham)

# Data Normalization

## What is data normalization?

**Data normalization** is the process of creating **normalized data**,
which are datasets free from data redundancy to simplify query,
analysis, storing, and maintenance. In normalized data we organize data
so that :

-   Each table follows the tidy data principles
-   We have separate tables for each type of entity measured
-   Observations (rows) are all unique
-   Each column represents either an identifying variable or a measured
    variable

::: fragment
In **denormalized data** observations about different entities are
combined. A good indication that a data table is denormalized and needs
normalization is seeing the same column values repeated across multiple
rows.
:::

# Example

## 

In **denormalized data** observations about different entities are
combined.

A good indication that a data table is denormalized and needs
normalization is seeing the same column values repeated across multiple
rows.

What about our previous table?

![](tidy-data-images/tidy_data/tidy_not_normal.png)

## 

In the previous data table the row values for the last three columns are
repeated.

![](tidy-data-images/data_normalization/denormalized.png){fig-align="center"
width="80%"}

::: fragment
This means the data is denormalized and it happens because each row has
measurements about multiple entities:

![](tidy-data-images/data_normalization/two_entities.png){fig-align="center"
width="80%"}
:::

## 

![](tidy-data-images/tidy_data/tidy_not_normal.png){fig-align="center"
width="50%"}

If we use this information to normalize our data, we should end up with:

       one tidy table for each entity observed, and

       additional columns for identifying variables (such as site ID).

::: fragment
![](tidy-data-images/data_normalization/normalized.png){fig-align="center"
width="55%"}
:::

Notice that each table also satisfies the tidy data principles.

## 

Normalizing data by separating it into multiple tables often makes
researchers really uncomfortable. This is understandable!

The person who designed this study collected all of these measurements
for a reason - so that they could analyze the measurements together.

Now that our site and plant information are in separate tables, how
would we use site altitude as a predictor variable for species
composition, for example?

We will go over a solution in the next section.

![tidy images by Allison
Horst](tidy-data-images/data_normalization/tidy-assembly.jpg){fig-align="center"}

# Relational Data Models

## 

> It’s rare that a data analysis involves only a single table of data. Typically you have many tables of data, and you must combine them to answer the questions that you’re interested in. Collectively, multiple tables of data are called relational data because it is the relations, not just the individual datasets, that are important. (R for Data Science Chapter 13 Relational Data)

## What are relational data models?

A **relational data model** is a way of encoding links between multiple
tables in a database. A database organized following a relational data
model is a **relational database**. A few of the advantages of using a
relational data model are:

-   Enabling powerful search and filtering
-   Ability to handle large, complex data sets
-   Enforcing data integrity
-   Decreasing errors from redundant updates

::: fragment
Relational data models are used by relational databases (like mySQL,
MariaDB, Oracle, or Microsoft Access) to organize tables. However, you
don't have to be using a relational database or handling large and
complex data to enjoy the benefits of using a relational data model.
:::

## Primary and foreign keys

The main way in which relational data models encode relationships
between different tables is by using keys. **Keys** are variables whose
values uniquely identify observations.

For tidy data, where variables and columns are equivalent, a column is a
key if it has a different value in each row. This allows us to use keys
as unique identifiers that reference particular observations and create
links across tables.

::: fragment
Two types of keys are common within relational data models:

-   **Primary Key**: chosen key for a table, uniquely identifies each
    observation in the table,
:::

::: fragment
-   **Foreign Key**: reference to a primary key in another table, used
    to create links between tables.
:::

# Example

## 

On our previously normalized data for plants and sites, let's choose
primary keys for these tables and then identify any foreign keys.

![](tidy-data-images/data_normalization/normalized.png)

Remeber:\
**Primary Key**: chosen key for a table, uniquely identifies each
observation in the table,

**Foreign Key**: reference to a primary key in another table, used to
create links between tables.

## 

**Example - Primary keys**

'date', 'site' and 'sp_code' cannot be primary keys because they have
repeated values across rows.

'sp_height' and 'id' both have different values in each row, so both are
candidates for primary keys.

the decimal values of 'sp_height' don't make it as useful for
referencing observations.

So we chose 'id' as the primary key for this table.

For the sites table, all three columns could be keys. We chose 'site' as
the primary key because it is the most succinct and it also allows us to
link the sites table with the plants table.

![](tidy-data-images/relational_data_models/primary_keys.png){fig-align="center"}

## 

**Example - Foreign keys**

The 'site' column is the *primary key* of that table because it uniquely
identifies each row of the table as a unique observation of a site. In
the first table, however, the 'site' column is a *foreign key* that
references the primary key from the second table. This linkage tells us
that the first height measurement for the DAPU observation occurred at
the site with the name Taku.

![](tidy-data-images/relational_data_models/primary_foreign_keys.png){fig-align="center"}

<!--## Surrogate and natural keys

-   **Surrogate Key**: a key whose values do not exist in the real
    world,
-   **Natural Key**: a key whose values exist in the real world.

A surrogate key is often simpler, and can be a better choice than a
natural key to become the primary key of a data table.

::: fragment
![](tidy-data-images/relational_data_models/surrogate_natural_keys.png){fig-align="center"
width="70%"}
::: -->

## Compound keys

Finally, it can also be the case that a variable is not a key, but by
combining it with a second variable we get that the combined values
uniquely identify the rows. This is called a

-   **Compound Key**: a key that is made up of more than one variable.

::: fragment
![](tidy-data-images/relational_data_models/compound_key.png){fig-align="center"
width="70%"}
:::

# Entity-Relationship models

## 

An **Entity-Relationship model (E-R model)**, also known as an E-R
diagram, is a way to draw a compact diagram that reflects the structure
and relationships of the tables in a relational database. These can be
particularly useful for big databases that have many tables and complex
relationships between them.

![ER-Model from Mermaid
documentation](tidy-data-images/relational_data_models/mermaid_diagram.png){fig-align="center"}

# Example

We will explain the steps to drawing a simplified E-R model with our
previous plants and sites tables.

# 

*Step 1: Identify the entities in the relational database and add each
one in a box.*

![](tidy-data-images/relational_data_models/primary_foreign_keys.png){fig-align="center"
width="50%"}

::: fragment
In our case, entities are \[plants\] and \[sites\], since we are
gathering observations about both of these.

![](tidy-data-images/relational_data_models/ER_diagram_0.png){fig-align="center"
width="40%"}
:::

## 

*Step 2: Add variables for each entity and identify keys.*

Add the variables as a list inside each box. Then, identify the primary
and foreign keys in each of the boxes.

![](tidy-data-images/relational_data_models/primary_foreign_keys.png){fig-align="center"
width="40%"}

::: fragment
![](tidy-data-images/relational_data_models/ER_diagram_2.png){fig-align="center"
width="50%"}
:::

## 

*Step 3: Add relationships between entities.*

-   Draw a line between the boxes of any two entities that have a
    relationship.

-   Identify which box has the primary key of the other as a foreign
    key. Let's call the box that has the foreign key \[box1\] and the
    other box \[box2\].

::: fragment
![](tidy-data-images/relational_data_models/ER_diagram_6.png){fig-align="center"
width="70%"}
:::

## 

*Step 3: Add relationships between entities. (continued)*

Add a word describing how \[box1\] is related to \[box2\] above the line
connecting the two boxes. So, for example, we need to describe how
\[plants\] is related to \[sites\].

::: fragment
The relation is "a plant is located in a site", so we write "located"
above the line indicating the relationship between \[plants\] and
\[sites\].

![](tidy-data-images/relational_data_models/ER_diagram_3.png){fig-align="center"
width="70%"}
:::

## 

*Step 4: Add cardinality to every relationship in the diagram.*

At this step we want to quantify how many items in an entity are related
to another entity. This is easiest if we reuse the description we found
in the previous step. For example, "a plant is located in one site".
Then we add the symbol for "one" at the end of the line going from
\[plants\] to \[sites\].

::: fragment
![](tidy-data-images/relational_data_models/ER_diagram_4.png){fig-align="center"
width="50%"}
:::

::: fragment
To finish, we also indicate how many plants are related to a single
site. Since "a site has many plants", we add the symbol for "many" at
the end of the line going from \[sites\] to \[plants\]

![](tidy-data-images/relational_data_models/ER_diagram_5.png){fig-align="center"
width="50%"}
:::

## 

::: columns
::: {.column width="30%"}
That's it!

The symbols we used at the end of the lines are called **ERD "crow's
foot"**. You can see all the existing ones together with an example in
the next diagram.
:::

::: {.column width="70%"}
![](tidy-data-images/relational_data_models/ERD_Relationship_Symbols_Quick_Reference.png){fig-align="center"
width="75%"}
:::
:::

# Merging Data

## 

Frequently, analysis of data will require merging these separately
managed tables back together. There are multiple ways to join the
observations in two tables, based on how the rows of one table are
merged with the rows of the other. Regardless of the join we will
perform, we need to start by identifying the primary key in each table
and how these appear as foreign keys in other tables.

When conceptualizing merges, one can think of two tables, one on the
*left* and one on the *right*.

![](tidy-data-images/merging_data/join-diagrams-separate.png)

## Inner Join

An *INNER JOIN* is when you merge the subset of rows that have matches
in both the left table and the right table.

![](tidy-data-images/merging_data/join-diagrams-inner.png)

## Left Join

A *LEFT JOIN* takes all of the rows from the left table, and merges on
the data from matching rows in the right table. Keys that don't match
from the left table are still provided with a missing value (na) from
the right table.

![](tidy-data-images/merging_data/join-diagrams-left.png)

## Right Join

A *RIGHT JOIN* is the same as a left join, except that all of the rows
from the right table are included with matching data from the left, or a
missing value. Notice that left and right joins can ultimately be the
same depending on the positions of the tables

![](tidy-data-images/merging_data/join-diagrams-right.png)

## Full Outer Join

Finally, a *FULL OUTER JOIN* includes all data from all rows in both
tables, and includes missing values wherever necessary.

![](tidy-data-images/merging_data/join-diagrams-full.png)

## 

Sometimes people represent joins as Venn diagrams, showing which parts
of the left and right tables are included in the results for each join.
This representation is useful, however, they miss part of the story
related to where the missing value comes from in each result.

![Image source: R for Data Science, Wickham &
Grolemund.](tidy-data-images/merging_data/join-venn.png)

# Best Practices Summary

## Summary

The **tidy data principles** are:

       (1) Every column is a variable.        (2) Every row is an
observation.        (3) Every cell is a single value.

In **normalized data** we organize data so that :

1.  We have separate tables for each type of entity measured

2.  Observations (rows) are all unique

3.  Each column represents either an identifying variable or a measured
    variable

4.  Each table follows the tidy data principles

**Relational data models** with **primary and foreign keys** in each
table allow us to maintain relationships between separate normalized
tables. Choose primary keys based on your understanding of the data and
take efficiency into account.

An **Entity-Relationship model** can be an effective way to explain how
different tables and their keys are related. If we need to merge tables
we can do it using different types of **joins**.


# A little on Data Management

## 

Tidy data is one very important step to data management best practices.
However there is more to consider. Here we provide some **extra advice**
from a great paper called ['Some Simple Guidelines for Effective Data
Management'](https://esajournals.onlinelibrary.wiley.com/doi/full/10.1890/0012-9623-90.2.205):

-   Design tables to add rows, not columns
-   Use a scripted program (like R!)
-   Non-proprietary file formats are preferred (eg: csv, txt)
-   Keep a raw version of data
-   Use descriptive files and variable names (without spaces!)
-   Include a header line in your tabular data files
-   Use plain ASCII text

In the Cleaning & Wrangling chapter we will cover more best practices
for cleaning irregular and missing data and how to implement them using
R.


# Activity